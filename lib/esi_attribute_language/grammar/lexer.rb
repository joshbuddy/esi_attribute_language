#--
# DO NOT MODIFY!!!!
# This file is automatically generated by rex 1.0.3
# from lexical definition file "lib/esi_attribute_lang/grammar/lexer.rex".
#++

module EsiAttributeLanguageibute
class Parser
  require 'strscan'

  class ScanError < StandardError ; end

  attr_reader :lineno
  attr_reader :filename

  def scan_setup ; end

  def action &block
    yield
  end

  def scan_str( str )
    scan_evaluate  str
    do_parse
  end

  def load_file( filename )
    @filename = filename
    open(filename, "r") do |f|
      scan_evaluate  f.read
    end
  end

  def scan_file( filename )
    load_file  filename
    do_parse
  end

  def next_token
    @rex_tokens.shift
  end

  def scan_evaluate( str )
    scan_setup
    @rex_tokens = []
    @lineno  =  1
    ss = StringScanner.new(str)
    state = nil
    until ss.eos?
      text = ss.peek(1)
      @lineno  +=  1  if text == "\n"
      case state
      when nil
        case
        when (text = ss.scan(/\$/))
           @rex_tokens.push action { [:DOLLAR,  text] }

        when (text = ss.scan(/\|/))
           @rex_tokens.push action { [:PIPE,    text] }

        when (text = ss.scan(/\[/))
           @rex_tokens.push action { [:LSQUARE, text] }

        when (text = ss.scan(/\]/))
           @rex_tokens.push action { [:RSQUARE, text] }

        when (text = ss.scan(/\{/))
           @rex_tokens.push action { [:LBRACE,  text] }

        when (text = ss.scan(/\}/))
           @rex_tokens.push action { [:RBRACE,  text] }

        when (text = ss.scan(/\(/))
           @rex_tokens.push action { [:LPAREN,  text] }

        when (text = ss.scan(/\)/))
           @rex_tokens.push action { [:RPAREN,  text] }

        when (text = ss.scan(/\\/))
           @rex_tokens.push action { [:BSLASH,  text] }

        when (text = ss.scan(/\+/))
           @rex_tokens.push action { [:PLUS,    text] }

        when (text = ss.scan(/\*/))
           @rex_tokens.push action { [:STAR,    text] }

        when (text = ss.scan(/\?/))
           @rex_tokens.push action { [:QMARK,   text] }

        when (text = ss.scan(/\./))
           @rex_tokens.push action { [:DOT,     text] }

        when (text = ss.scan(/\^/))
           @rex_tokens.push action { [:CARROT,  text] }

        when (text = ss.scan(/-/))
           @rex_tokens.push action { [:MINUS,   text] }

        when (text = ss.scan(/&/))
           @rex_tokens.push action { [:AMP,     text] }

        when (text = ss.scan(/!/))
           @rex_tokens.push action { [:BANG,    text] }

        when (text = ss.scan(/./))
           @rex_tokens.push action { [:CHAR,    text] }

        else
          text = ss.string[ss.pos .. -1]
          raise  ScanError, "can not match: '" + text + "'"
        end  # if

      else
        raise  ScanError, "undefined state: '" + state.to_s + "'"
      end  # case state
    end  # until ss
  end  # def scan_evaluate

end # class
end # module
